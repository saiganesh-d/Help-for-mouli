‚ÄúTechnical Authentication‚Äù in the GAS-OIDC guide

(a.k.a. the Client-Credentials grant)

‚ùì What is it?	Machine-to-machine authentication ‚Äì no human end-user, just your API caller (another backend, cron-job, integration platform‚Ä¶) requesting an access-token with its own client_id + client_secret.

ü§ù Where is it used?	Whenever your Django app exposes a REST/JSON API that other internal systems consume. Those systems will: 1Ô∏è‚É£ call the /token endpoint with grant_type=client_credentials ‚Üí 2Ô∏è‚É£ receive a short-lived opaque access-token ‚Üí 3Ô∏è‚É£ hit your API with Authorization: Bearer <token>.
üß© How does your API trust the token?	By doing a token-introspection call (RFC 7662) back to GAS-OIDC. If the response says active:true, you accept the request; else you return HTTP 401.


The pictures you sent (section 6) show the exact sequence:

Caller ‚îÄ‚îÄ(client_credentials)‚îÄ‚îÄ‚ñ∫ IDP ‚îÄ‚îÄ‚ñ∫ token
Caller ‚îÄ‚îÄ(Bearer token)‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Your API
Your API ‚îÄ‚ñ∫ Introspect token ‚ñ∫ IDP
IDP   ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ active? sub? scope?  ‚îÄ‚ñ∫ Your API
Your API ‚îÄ‚ñ∫ business logic / data

Below is a step-by-step recipe to add this to the Django project you already OIDC-enabled for user logins.


---

1 ¬∑ Register a ‚Äútechnical client‚Äù

1. In the IAM Approval Tool create a new client of type ‚ÄúClient-Credentials‚Äù.


2. Pick the scopes your API will understand ‚Äì e.g. myapi.read, myapi.write.


3. (Optional) Bind a technical user to the client. The user‚Äôs UID will appear in the introspection response‚Äôs sub claim so downstream systems can look up roles in LDAP/DRD.


4. Hand the generated client_id & client_secret to the team that will call your API.




---

2 ¬∑ Expose the discovery & introspection URLs

# settings.py
OIDC_OP_DISCOVERY_ENDPOINT = "https://sso-int.mercedes-benz.com/.well-known/openid-configuration"

Fetch the discovery doc once to see the introspection_endpoint (mozilla-django-oidc exposes it via from mozilla_django_oidc.utils import get_provider_info).


---

3 ¬∑ Add a Django ‚ÄúBearer‚Äù authentication class

# auth.py
import requests, time
from django.conf import settings
from rest_framework import authentication, exceptions     # if you use DRF; otherwise make middleware

INTROSPECT_URL = ...  # pull from discovery once at startup
INTROSPECT_AUTH = (settings.API_INTROSPECT_CLIENT_ID,
                   settings.API_INTROSPECT_CLIENT_SECRET)

_CACHE = {}           # token -> (expiration_ts, payload)

class IntrospectAuth(authentication.BaseAuthentication):
    """DRF style auth class that validates Client-Credentials tokens."""

    def authenticate(self, request):
        header = request.headers.get("Authorization", "")
        if not header.startswith("Bearer "):
            return None

        token = header.split()[1]
        # ---------- tiny in-memory cache ----------
        entry = _CACHE.get(token)
        if entry and entry[0] > time.time():
            payload = entry[1]
        else:
            resp = requests.post(
                INTROSPECT_URL,
                auth=INTROSPECT_AUTH,
                data={"token": token},
                timeout=3,
            )
            if resp.status_code != 200:
                raise exceptions.AuthenticationFailed("Introspection error")
            payload = resp.json()
            if not payload.get("active"):
                raise exceptions.AuthenticationFailed("Token inactive")
            _CACHE[token] = (time.time() + 55, payload)   # cache for ~1 minute
        # ------------------------------------------

        # OPTIONAL: check scope
        if "myapi.read" not in payload.get("scope", "").split():
            raise exceptions.PermissionDenied("Scope missing")

        # Build a Django user object on-the-fly (no password / no DB write)
        from django.contrib.auth.models import AnonymousUser, User
        user = User(username=payload["sub"]) if "sub" in payload else AnonymousUser()
        user.is_authenticated = True
        request.auth = payload                     # raw introspection payload if views need it
        return (user, None)

If you don‚Äôt use Django-REST-Framework: wrap the same logic in middleware and set request.user yourself.


---

4 ¬∑ Wire it into the API

# settings.py (for DRF)
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "myproject.auth.IntrospectAuth",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
}

For vanilla Django views:

from django.http import JsonResponse
from myproject.auth import IntrospectAuth

@IntrospectAuth.as_view()       # or custom decorator
def data_endpoint(request):
    return JsonResponse({"ok": True})


---

5 ¬∑ Tell your consumers how to call you

POST /as/token.oauth2
  Authorization: Basic base64(client_id:client_secret)
  Content-Type: application/x-www-form-urlencoded

  grant_type=client_credentials

Returns:

{
  "access_token": "vCA...wr9n",
  "token_type": "Bearer",
  "expires_in": 1799   // 30 min is typical
}

They must cache the token and reuse it until ~60 s before expiry, then fetch a new one.


---

6 ¬∑ Important ‚Äúgotchas‚Äù from the guide

Spec sentence	What it means for you

‚ÄúYou cannot call /userinfo with a client-credentials token.‚Äù	Don‚Äôt even try ‚Äì that endpoint is only for end-user tokens.
‚ÄúEach client is limited to 7 refresh tokens / user‚Äù	N/A ‚Äì client-credentials tokens never return a refresh-token.
‚ÄúAPIs must introspect the token and verify sub against LDAP if they need roles.‚Äù	The introspection payload tells you sub=TE12345. If your API needs fine-grained perms, look them up in DRD/LDAP using that UID.
‚ÄúFallback on 401: try to get a new token but avoid loops.‚Äù	Your callers should retry once; your API should just issue 401 and never refresh on behalf of the caller.



---

7 ¬∑ Local smoke-test

export CC_ID=... CC_SECRET=...
curl -u $CC_ID:$CC_SECRET \
     -d 'grant_type=client_credentials' \
     https://sso-int.mercedes-benz.com/as/token.oauth2
# copy access_token ‚Üí
curl -H 'Authorization: Bearer eyJ...' http://localhost:8000/api/hello

Expected ‚Üí 200 JSON from your view.


---

That‚Äôs it!

User-facing pages use the Authorization-Code + PKCE flow you already wired.

Server-to-server calls use the Client-Credentials flow you just added.


Both rely on the same identity provider; your Django project is now a full-fledged Relying Party + Resource Server. Ping me if you need help adding token-introspection caching, OpenAPI docs with securitySchemes, or scope-based permission classes.

