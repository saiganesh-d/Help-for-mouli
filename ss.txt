package main

import (
	"encoding/json"
	"fmt"
)

// CounterBuffer represents the structure of a counter or buffer object
type CounterBuffer struct {
	Description string `json:"description"`
	Start       int    `json:"start"`
	End         int    `json:"end"`
	Extraceted  string `json:"extraceted"`
	Decimal     int    `json:"decimal"`
}

// EventData represents the structure of an event object
type EventData struct {
	EventType          string          `json:"cb_event_type"`
	CounterDescription string          `json:"cb_counter_description"`
	BufferContent      []CounterBuffer `json:"cb_buffer_content"`
}

// Configuration represents the structure of the JSON configuration
type Configuration struct {
	ByteRange []EventData `json:"cb_byte_range"`
}

func main() {
	// Sample JSON configuration
	jsonData := `{
		"cb_byte_range":[
		  {
			"cb_event_type" :"01",
			"cb_counter_description":"failed",
			"cb_buffer_content":[
			  {
				"description":"cb_ticks",
				"start":0,
				"end":4,
				"extraceted": "00011",
				"decimal":122
			  },
			  {
				"description":"cb_daig",
				"start":0,
				"end":4,
				"extraceted": "00011",
				"decimal":122
			  }
			]
		  },
		  {
			"cb_event_type" :"02",
			"cb_counter_description":"failsssed",
			"cb_buffer_content":[
			  {
				"description":"cb_ticks",
				"start":0,
				"end":4,
				"extraceted": "00011",
				"decimal":122
			  },
			  {
				"description":"cb_daig",
				"start":0,
				"end":4,
				"extraceted": "00011",
				"decimal":122
			  }
			]
		  }
		]
	  }`

	// Parse JSON configuration
	var config Configuration
	if err := json.Unmarshal([]byte(jsonData), &config); err != nil {
		fmt.Println("Error parsing JSON:", err)
		return
	}

	// Generate Go struct definitions
	fmt.Println("Generated Go struct definitions:")
	fmt.Println("------------------------------")
	for _, event := range config.ByteRange {
		fmt.Printf("type %s struct {\n", event.EventType)
		fmt.Printf("\tEventType string `json:\"cb_event_type\"`\n")
		fmt.Printf("\tCounterDescription string `json:\"cb_counter_description\"`\n")
		fmt.Printf("\tBufferContent []struct {\n")
		fmt.Printf("\t\tDescription string `json:\"description\"`\n")
		fmt.Printf("\t\tStart int `json:\"start\"`\n")
		fmt.Printf("\t\tEnd int `json:\"end\"`\n")
		fmt.Printf("\t\tExtraceted string `json:\"extraceted\"`\n")
		fmt.Printf("\t\tDecimal int `json:\"decimal\"`\n")
		fmt.Printf("\t} `json:\"cb_buffer_content\"`\n")
		fmt.Println("}")
		fmt.Println()
	}
}
