import requests
import json

# NVD API to fetch CVE details
def get_cve_details(cve_id, api_key):
    url = f"https://services.nvd.nist.gov/rest/json/cve/1.0/{cve_id}"
    headers = {'apiKey': api_key}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error: {response.status_code}')
        return None

# Exploit-DB to fetch exploit details
def fetch_exploits(cve_id):
    url = f"https://www.exploit-db.com/search?cve={cve_id}"
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        table = soup.find('table', {'id': 'exploits-table'})
        
        exploits = []
        if table:
            for row in table.find('tbody').find_all('tr'):
                columns = row.find_all('td')
                exploit = {
                    'date': columns[1].text.strip(),
                    'description': columns[2].text.strip(),
                    'platform': columns[3].text.strip(),
                    'type': columns[4].text.strip(),
                    'author': columns[5].text.strip(),
                    'link': f"https://www.exploit-db.com{columns[2].find('a')['href']}"
                }
                exploits.append(exploit)
        return exploits
    else:
        print(f'Error: {response.status_code}')
        return None

# Example usage
cve_id = "CVE-2021-3156"
nvd_api_key = "YOUR_NVD_API_KEY"

# Fetch CVE details
cve_details = get_cve_details(cve_id, nvd_api_key)
print(json.dumps(cve_details, indent=4))

# Fetch exploit details
exploits = fetch_exploits(cve_id)
for exploit in exploits:
    print(f"Date: {exploit['date']}, Description: {exploit['description']}, Platform: {exploit['platform']}, Type: {exploit['type']}, Author: {exploit['author']}, Link: {exploit['link']}")



import requests

def fetch_otx_data(cve_id):
    api_key = 'YOUR_OTX_API_KEY'
    headers = {'X-OTX-API-KEY': api_key}
    url = f'https://otx.alienvault.com/api/v1/indicators/cve/{cve_id}/general'
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error: {response.status_code}')
        return None

# Example usage
otx_data = fetch_otx_data(cve_id)
print(json.dumps(otx_data, indent=4))



def calculate_risk_score(cve_details, exploits, otx_data):
    cvss_score = cve_details['impact']['baseMetricV3']['cvssV3']['baseScore']
    exploit_count = len(exploits)
    otx_pulse_count = len(otx_data.get('pulse_info', {}).get('pulses', []))
    
    # Simple risk score calculation (can be more complex)
    risk_score = cvss_score + (exploit_count * 2) + (otx_pulse_count * 3)
    return risk_score

risk_score = calculate_risk_score(cve_details, exploits, otx_data)
print(f'Calculated Risk Score: {risk_score}')
